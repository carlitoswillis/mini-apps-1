// function List(props) {
//   const numbers = props.numbers;
//   const listItems = numbers.map((number) =>
//     <li>{number}</li>
//   );
//   return (
//     <ul>{listItems}</ul>
//   );
// }
class SignUp extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  onChangeHandler(event) {
    this.setState({
      [event.target.name]: event.target.value
    });
  }

  render() {
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("form", {
      name: "signup"
    }, /*#__PURE__*/React.createElement("input", {
      onChange: this.onChangeHandler.bind(this),
      name: "name",
      placeholder: "name",
      type: "text",
      defaultValue: ""
    }), /*#__PURE__*/React.createElement("input", {
      onChange: this.onChangeHandler.bind(this),
      name: "email",
      placeholder: "email",
      type: "email",
      defaultValue: ""
    }), /*#__PURE__*/React.createElement("input", {
      onChange: this.onChangeHandler.bind(this),
      name: "password",
      placeholder: "password",
      type: "password",
      defaultValue: ""
    })), /*#__PURE__*/React.createElement("button", {
      onClick: event => {
        this.props.buttonHandler(event, this.state);
      }
    }, "Next"));
  }

}

class Shipping extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  onChangeHandler(event) {
    this.setState({
      [event.target.name]: event.target.value
    });
  }

  render() {
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("form", {
      name: "shipping"
    }, /*#__PURE__*/React.createElement("input", {
      onChange: this.onChangeHandler.bind(this),
      name: "address1",
      placeholder: "address",
      type: "text",
      defaultValue: ""
    }), /*#__PURE__*/React.createElement("input", {
      onChange: this.onChangeHandler.bind(this),
      name: "address2",
      placeholder: "apt number",
      type: "text",
      defaultValue: ""
    }), /*#__PURE__*/React.createElement("input", {
      onChange: this.onChangeHandler.bind(this),
      name: "phone",
      placeholder: "phone number",
      type: "text",
      defaultValue: ""
    })), /*#__PURE__*/React.createElement("button", {
      onClick: event => {
        this.props.buttonHandler(event, this.state);
      }
    }, "Next"));
  }

}

class CardInfo extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  onChangeHandler(event) {
    this.setState({
      [event.target.name]: event.target.value
    });
  }

  render() {
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("form", {
      name: "CardInfo"
    }, /*#__PURE__*/React.createElement("input", {
      onChange: this.onChangeHandler.bind(this),
      name: "cardnumber",
      placeholder: "credit card #",
      type: "text",
      defaultValue: ""
    }), /*#__PURE__*/React.createElement("input", {
      onChange: this.onChangeHandler.bind(this),
      name: "expiration",
      placeholder: "MM/YY",
      type: "text",
      defaultValue: ""
    }), /*#__PURE__*/React.createElement("input", {
      onChange: this.onChangeHandler.bind(this),
      name: "cvv",
      placeholder: "CVV",
      type: "number",
      defaultValue: ""
    }), /*#__PURE__*/React.createElement("input", {
      onChange: this.onChangeHandler.bind(this),
      name: "zipcode",
      placeholder: "zipcode",
      type: "text",
      defaultValue: ""
    })), /*#__PURE__*/React.createElement("button", {
      onClick: event => {
        this.props.buttonHandler(event, this.state);
      }
    }, "Next"));
  }

}

class Forms extends React.Component {
  constructor(props) {
    super(props);
  }

  render() {
    if (this.props.page === -1) {
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("p", null, "check out now"), /*#__PURE__*/React.createElement("button", {
        onClick: this.props.buttonHandler
      }, "Checkout"));
    } else if (this.props.page === 0) {
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(SignUp, {
        buttonHandler: this.props.buttonHandler
      }));
    } else if (this.props.page === 1) {
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Shipping, {
        buttonHandler: this.props.buttonHandler
      }));
    } else if (this.props.page === 2) {
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(CardInfo, {
        buttonHandler: this.props.buttonHandler
      }));
    } else if (this.props.page === 3) {
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("p", null, "Verify Your Purchase Info Below"), /*#__PURE__*/React.createElement("ol", null, this.props.purchase.map(pair => {
        /*#__PURE__*/
        React.createElement("li", null, " ", `${pair[0]}: ${pair[1]}`, " ");
      })), /*#__PURE__*/React.createElement("button", {
        onClick: this.props.buttonHandler
      }, "Purchase"));
    }
  }

}

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      page: -1,
      currentCustomer: []
    };
  }

  nextPage(event, data) {
    if (this.state.page === -1) {
      // create new database entry,
      var myHeaders = new Headers();
      var requestOptions = {
        method: 'POST',
        headers: myHeaders,
        redirect: 'follow'
      };
      fetch("http://localhost:3000/customer", requestOptions).then(response => response.text()).then(result => {
        this.setState({
          customerId: result,
          page: 0
        });
      }).catch(error => console.log('error', error));
    } else if (this.state.page <= 2) {
      if (this.state.page === 2) {
        event.target.innerHTML = 'Complete';
      }

      var myHeaders = new Headers();
      myHeaders.append("Content-Type", "application/json");
      data.id = this.state.customerId;
      var requestOptions = {
        method: 'POST',
        headers: myHeaders,
        body: JSON.stringify(data),
        redirect: 'follow'
      };
      fetch("http://localhost:3000/customer/info", requestOptions).then(response => response.text()).then(response => {
        var result = [];
        response = JSON.parse(response)[0];
        console.log(response);

        for (var key of Object.keys(response)) {
          result.push([key, response[key]]);
        }

        this.setState({
          purchase: result
        });
      }).catch(error => console.log('error', error));
      var page = this.state.page + 1;
      this.setState({
        page: page,
        currentCustomer: this.state.currentCustomer.concat(data)
      });
    } else if (this.state.page === 3) {// show data off
    } else {// do nothing
      }
  }

  render() {
    return /*#__PURE__*/React.createElement("div", {
      className: "App"
    }, /*#__PURE__*/React.createElement("h1", null, "App"), /*#__PURE__*/React.createElement(Forms, {
      buttonHandler: this.nextPage.bind(this),
      page: this.state.page,
      purchase: this.state.purchase
    }));
  }

}

export default App;
ReactDOM.render( /*#__PURE__*/React.createElement(App, null), document.getElementById("container"));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,